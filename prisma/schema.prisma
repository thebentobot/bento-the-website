generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bento {
  userID    BigInt   @id(map: "bento_pk") @unique(map: "bento_userid_uindex")
  bento     Int
  bentoDate DateTime @default(now()) @db.Timestamptz(6)
  user      user     @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "bento_user_userid_fk")
}

model guild {
  guildID     BigInt        @id(map: "guild_pk") @unique(map: "guild_guildid_uindex")
  guildName   String        @db.VarChar(255)
  prefix      String        @db.VarChar(16)
  tiktok      Boolean
  leaderboard Boolean
  media       Boolean
  icon        String?       @db.VarChar
  memberCount Int?
  guildMember guildMember[]
  tag         tag[]
}

model guildMember {
  guildMemberID BigInt  @id(map: "guildmember_pk") @unique(map: "guildmember_guildmemberid_uindex") @default(autoincrement())
  userID        BigInt
  guildID       BigInt
  xp            Int
  level         Int
  avatarURL     String? @db.VarChar
  guild         guild   @relation(fields: [guildID], references: [guildID], onDelete: Cascade, onUpdate: NoAction, map: "guildmember_guild_guildid_fk")
  user          user    @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "guildmember_user_userid_fk")
}

model lastfm {
  userID BigInt @id(map: "lastfm_pk") @unique(map: "lastfm_userid_uindex")
  lastfm String @db.VarChar(255)
  user   user   @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "lastfm_user_userid_fk")
}

model patreon {
  id         Int     @id(map: "patreon_pk") @unique(map: "patreon_id_uindex") @default(autoincrement())
  userID     BigInt  @unique(map: "patreon_userid_uindex")
  name       String? @db.VarChar
  avatar     String? @db.VarChar
  supporter  Boolean
  follower   Boolean
  enthusiast Boolean
  disciple   Boolean
  sponsor    Boolean
  emoteSlot1 String? @db.VarChar
  emoteSlot2 String? @db.VarChar
  emoteSlot3 String? @db.VarChar
  emoteSlot4 String? @db.VarChar
  user       user    @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "patreon_user_userid_fk")
}

model profile {
  userID                     BigInt   @id(map: "profile_pk") @unique(map: "profile_userid_uindex")
  lastfmBoard                Boolean?
  xpBoard                    Boolean?
  backgroundUrl              String?  @db.VarChar
  BackgroundColourOpacity    Int?
  backgroundColour           String?  @db.VarChar
  descriptionColourOpacity   Int?
  descriptionColour          String?  @db.VarChar
  overlayOpacity             Int?
  overlayColour              String?  @db.VarChar
  usernameColour             String?  @db.VarChar
  discriminatorColour        String?  @db.VarChar
  sidebarItemServerColour    String?  @db.VarChar
  sidebarItemGlobalColour    String?  @db.VarChar
  sidebarItemBentoColour     String?  @db.VarChar
  sidebarItemTimezoneColour  String?  @db.VarChar
  sidebarValueServerColour   String?  @db.VarChar
  sidebarValueGlobalColour   String?  @db.VarChar
  sidebarValueBentoColour    String?  @db.VarChar
  sidebarOpacity             Int?
  sidebarColour              String?  @db.VarChar
  sidebarBlur                Int?
  fmDivBGOpacity             Int?
  fmDivBGColour              String?  @db.VarChar
  fmSongTextOpacity          Int?
  fmSongTextColour           String?  @db.VarChar
  fmArtistTextOpacity        Int?
  fmArtistTextColour         String?  @db.VarChar
  xpDivBGOpacity             Int?
  xpDivBGColour              String?  @db.VarChar
  xpTextOpacity              Int?
  xpTextColour               String?  @db.VarChar
  xpText2Opacity             Int?
  xpText2Colour              String?  @db.VarChar
  xpDoneServerColour1Opacity Int?
  xpDoneServerColour1        String?  @db.VarChar
  xpDoneServerColour2Opacity Int?
  xpDoneServerColour2        String?  @db.VarChar
  xpDoneServerColour3Opacity Int?
  xpDoneServerColour3        String?  @db.VarChar
  xpDoneGlobalColour1Opacity Int?
  xpDoneGlobalColour1        String?  @db.VarChar
  xpDoneGlobalColour2Opacity Int?
  xpDoneGlobalColour2        String?  @db.VarChar
  xpDoneGlobalColour3Opacity Int?
  xpDoneGlobalColour3        String?  @db.VarChar
  description                String?  @db.VarChar
  timezone                   String?  @db.VarChar
  birthday                   String?  @db.VarChar
  xpBarOpacity               Int?
  xpBarColour                String?  @db.VarChar
  xpBar2Opacity              Int?
  xpBar2Colour               String?  @db.VarChar
  user                       user     @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "profile_user_userid_fk")
}

model reminder {
  id       Int      @id(map: "reminder_pk") @unique(map: "reminder_id_uindex") @default(autoincrement())
  userID   BigInt
  date     DateTime @default(now()) @db.Timestamptz(6)
  reminder String   @db.VarChar
  user     user     @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "reminder_user_userid_fk")
}

model rpsGame {
  id             Int    @id(map: "rpsgame_pk") @unique(map: "rpsgame_id_uindex") @default(autoincrement())
  userID         BigInt @unique(map: "rpsgame_userid_uindex")
  paperWins      Int?
  paperLosses    Int?
  rockWins       Int?
  rockLosses     Int?
  scissorWins    Int?
  scissorsLosses Int?
  paperTies      Int?
  rockTies       Int?
  scissorsTies   Int?
  user           user   @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "rpsgame_user_userid_fk")
}

model tag {
  tagID   BigInt    @id(map: "tag_pk") @unique(map: "tag_tagid_uindex") @default(autoincrement())
  userID  BigInt
  guildID BigInt
  date    DateTime? @default(now()) @db.Timestamptz(6)
  command String    @db.VarChar(255)
  content String    @db.VarChar
  count   Int
  guild   guild     @relation(fields: [guildID], references: [guildID], onDelete: Cascade, onUpdate: NoAction, map: "tag_guild_guildid_fk")
  user    user      @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "tag_user_userid_fk")
}

model user {
  userID        BigInt        @id(map: "user_pk") @unique(map: "user_userid_uindex")
  discriminator String        @db.VarChar
  xp            Int
  level         Int
  username      String?       @db.VarChar
  avatarURL     String?       @db.VarChar
  bento         bento?
  guildMember   guildMember[]
  lastfm        lastfm?
  patreon       patreon?
  profile       profile?
  reminder      reminder[]
  rpsGame       rpsGame?
  tag           tag[]
  weather       weather?
}

model weather {
  userID BigInt @id(map: "weather_pk") @unique(map: "weather_userid_uindex")
  city   String @db.VarChar(255)
  user   user   @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction, map: "weather_user_userid_fk")
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}
